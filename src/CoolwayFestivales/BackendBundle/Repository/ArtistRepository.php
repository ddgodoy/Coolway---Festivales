<?php

namespace CoolwayFestivales\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArtistRepository extends EntityRepository
{
    public function findInFestival($feast_id)
    {
        $q = $this->getEntityManager()->createQuery(
            "SELECT a FROM BackendBundle:Artist a
            LEFT JOIN BackendBundle:FeastStageArtist fsa WITH fsa.artist = a.id
            LEFT JOIN BackendBundle:FeastStage fs WITH fsa.feast_stage = fs.id
			WHERE fs.feast = $feast_id
			ORDER BY a.id ASC"
        );
        return $q->getResult();
    }
    //
    public function getArtistasIds($authorization, $storage)
    {
        $r = null;
        $a = array();

        if ($authorization->isGranted('ROLE_SUPER_ADMIN'))
        {
            $q = $this->getEntityManager()->createQuery("SELECT a FROM BackendBundle:Artist a ORDER BY a.id ASC");
            $r = $q->getResult();
        } else {
            $token = $storage->getToken();
            $user  = $token->getUser();
            $r = $this->findInFestival($user->getFeast()->getId());
        }
        if ($r)
        {
            foreach ($r as $value) { $a[] = $value->getId(); }
        }
        return $a;
    }
    //
    public function setRequiredImages($entity)
    {
        $aFlags = array('foto' => false, 'portada' => false);

        if (empty($entity->getPath()))  { $aFlags['foto'] = true; }
        if (empty($entity->getCover())) { $aFlags['portada'] = true; }

        return $aFlags;
    }
    //
    public function cleanSocialNetworksValues($entity)
    {
        $spotity   = $this->wipeOutSocialString($entity->getIdSpotify());
        $twitter   = $this->wipeOutSocialString($entity->getTwitter());
        $facebook  = $this->wipeOutSocialString($entity->getFacebook());
        $instagram = $this->wipeOutSocialString($entity->getInstagram());

        $entity->setIdSpotify($spotity);
        $entity->setTwitter  ($twitter);
        $entity->setFacebook ($facebook);
        $entity->setInstagram($instagram);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();
    }
    //
    public function wipeOutSocialString($social)
    {
        $clean = '';

        if (!empty($social))
        {
            $slash = substr($social, -1);

            if ($slash == '/') {
                $social = substr($social, 0, -1);
            }
            $chunks = explode('/', $social);
            $i_cant = count($chunks);
            $clean  = $chunks[$i_cant-1];
        }
        return $clean;
    }

} // end class